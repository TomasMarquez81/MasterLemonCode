/*
5. Slot Machine
El objetivo de este ejercicio es crear una m√°quina tragaperras utilizando clases donde cada vez que juguemos insertemos una moneda. Cada m√°quina tragaperras (instancia) tendr√° un contador de monedas que autom√°ticamente se ir√° incrementando conforme vayamos jugando.

Cuando se llame al m√©todo play el n√∫mero de monedas se debe incrementar de forma autom√°tica y debe generar tres booleanos aleatorios que representar√°n el estado de las 3 ruletas. El usuario habr√° ganado en caso de que los tres booleanos sean true, y por tanto deber√° mostrarse por consola el mensaje:

"Congratulations!!!. You won <n√∫mero de monedas> coins!!";
y reiniciar las monedas almacenadas, ya que las hemos conseguido y han salido de la m√°quina. En caso contrario deber√° mostrar otro mensaje:

"Good luck next time!!".
Ejemplo de uso
class SlotMachine {
}

const machine1 = new SlotMachine();
machine1.play(); // "Good luck next time!!"
machine1.play(); // "Good luck next time!!"
machine1.play(); // "Congratulations!!!. You won 3 coins!!"
machine1.play(); // "Good luck next time!!"
machine1.play(); // "Congratulations!!!. You won 2 coins!!"
*/
console.log("************** DELIVERABLE 05 *********************");
class SlotMachine {
    coin: number
    // Constructor que inicializa las monedas
    constructor(coin) {
        this.coin = coin;
    }

    // M√©todo para insertar monedas
    insertCoin(coin) {
        this.coin += coin;
        console.log(`Has metido ${coin} ptas y ahora tienes ${this.coin} ptas`);
    }

    // M√©todo principal para jugar una tirada
    play() {
        // Lista de s√≠mbolos con su probabilidad (weight) y recompensa (reward)
        const symbols = [
    { emoji: 'üçÄ', weight: 0.05, reward: 300 },   // Muy raro, bajamos a√∫n m√°s
    { emoji: 'üîî', weight: 0.08, reward: 200 },
    { emoji: 'üçâ', weight: 0.1, reward: 150 },
    { emoji: 'üçã', weight: 0.17, reward: 100 },
    { emoji: 'üçä', weight: 0.25, reward: 50 },     // Subimos chisco (m√°s com√∫n)
    { emoji: 'üçå', weight: 0.35, reward: 25 },     // Subimos chisco (m√°s com√∫n)
];

        // Funci√≥n interna para seleccionar un s√≠mbolo de forma ponderada
        const getRandomSymbol = () => {
            // Suma total de probabilidades
            const totalWeight = symbols.reduce((acc, s) => acc + s.weight, 0);
            // N√∫mero aleatorio entre 0 y totalWeight
            let rand = Math.random() * totalWeight;

            // Recorremos s√≠mbolos y restamos su peso hasta que rand caiga en uno
            for (const symbol of symbols) {
                if (rand < symbol.weight) return symbol;
                rand -= symbol.weight;
            }
        };

        // Validaci√≥n: si no hay suficiente dinero, salimos
        if (this.coin < 25) {
            return console.log("‚ùå Te hace falta m√°s dinero üí∂");
        }

        // Restamos el coste de una tirada
        this.coin -= 25;

        // Generamos 3 s√≠mbolos (tirada)
        const reel = [getRandomSymbol(), getRandomSymbol(), getRandomSymbol()];

        // Mostramos los s√≠mbolos con formato
        const display = reel.map(s => s.emoji).join(" | ");
        console.log(`üé∞ ${display}`);

        // Verificamos si los tres s√≠mbolos son iguales
        const allEqual = reel.every(s => s.emoji === reel[0].emoji);

        // Resultado de la tirada
        if (allEqual) {
            const prize = reel[0].reward;
            this.coin += prize;
            console.log(`üéâ ¬°Has ganado ${prize} ptas! Tienes ${this.coin} ptas`);
        } else {
            console.log(`üò¢ No has ganado. Te quedan ${this.coin} ptas`);
        }
    }
}

// üëá Ejemplo de uso de la m√°quina
const machine1 = new SlotMachine(25); // Creamos una m√°quina con 25 ptas

machine1.play();  //Jugamos
machine1.insertCoin(500); // Metemos 500 ptas
machine1.play();         // Seguimos jugando
machine1.play();
machine1.play();
machine1.play();
machine1.play();